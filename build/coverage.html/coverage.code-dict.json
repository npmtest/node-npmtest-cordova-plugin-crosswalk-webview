{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-crosswalk-webview/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_crosswalk_webview */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-crosswalk-webview/lib.npmtest_cordova_plugin_crosswalk_webview.js":"/* istanbul instrument in package npmtest_cordova_plugin_crosswalk_webview */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_crosswalk_webview = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_crosswalk_webview = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-crosswalk-webview/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-crosswalk-webview && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_crosswalk_webview */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_crosswalk_webview\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_crosswalk_webview.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_crosswalk_webview.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_crosswalk_webview.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_crosswalk_webview.__dirname + '/lib.npmtest_cordova_plugin_crosswalk_webview.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-crosswalk-webview/node_modules/cordova-plugin-crosswalk-webview/hooks/update_config.js":"#!/usr/bin/env node\n\nmodule.exports = function(context) {\n\n    var ConfigParser, XmlHelpers;\n    try {\n        // cordova-lib >= 5.3.4 doesn't contain ConfigParser and xml-helpers anymore\n        ConfigParser = context.requireCordovaModule(\"cordova-common\").ConfigParser;\n        XmlHelpers = context.requireCordovaModule(\"cordova-common\").xmlHelpers;\n    } catch (e) {\n        ConfigParser = context.requireCordovaModule(\"cordova-lib/src/configparser/ConfigParser\");\n        XmlHelpers = context.requireCordovaModule(\"cordova-lib/src/util/xml-helpers\");\n    }\n\n    /** @external */\n    var fs = context.requireCordovaModule('fs'),\n        path = context.requireCordovaModule('path'),\n        et = context.requireCordovaModule('elementtree');\n\n    /** @defaults */\n    var xwalkVariables = {},\n        argumentsString = context.cmdLine,\n        pluginConfigurationFile = path.join(context.opts.plugin.dir, 'plugin.xml'),\n        androidPlatformDir = path.join(context.opts.projectRoot,\n            'platforms', 'android'),\n        projectConfigurationFile = path.join(context.opts.projectRoot,\n            'config.xml'),\n        platformConfigurationFile = path.join(androidPlatformDir,\n            'res', 'xml', 'config.xml'),\n        projectManifestFile = path.join(androidPlatformDir,\n            'AndroidManifest.xml'),\n        xwalk64bit = \"xwalk64bit\",\n        xwalkLiteVersion = \"\",\n        specificVersion = false;\n\n    /** Init */\n    var CordovaConfig = new ConfigParser(platformConfigurationFile);\n\n    var addPermission = function() {\n        var projectManifestXmlRoot = XmlHelpers.parseElementtreeSync(projectManifestFile);\n        var child = et.XML('<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />');\n        XmlHelpers.graftXML(projectManifestXmlRoot, [child], '/manifest');\n        fs.writeFileSync(projectManifestFile, projectManifestXmlRoot.write({indent: 4}), 'utf-8');\n    }\n\n    var removePermission = function() {\n        var projectManifestXmlRoot = XmlHelpers.parseElementtreeSync(projectManifestFile);\n        var child = et.XML('<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />');\n        XmlHelpers.pruneXML(projectManifestXmlRoot, [child], '/manifest');\n        fs.writeFileSync(projectManifestFile, projectManifestXmlRoot.write({indent: 4}), 'utf-8');\n    }\n\n    var defaultPreferences = function() {\n        var pluginPreferences = {};\n\n        var pluginXmlRoot = XmlHelpers.parseElementtreeSync(pluginConfigurationFile),\n            tagName = \"preference\",\n            containerName = \"config-file\",\n            targetPlatform = 'android',\n            targetPlatformTag = pluginXmlRoot.find('./platform[@name=\"' + targetPlatform + '\"]');\n\n        var tagsInRoot = pluginXmlRoot.findall(tagName) || [],\n            tagsInPlatform = targetPlatformTag ? targetPlatformTag.findall(tagName) : [],\n            tagsInContainer = targetPlatformTag ? targetPlatformTag.findall(containerName) : [],\n            tagsList = tagsInRoot.concat(tagsInContainer);\n\n        // Parses <preference> tags within <config-file>-blocks\n        tagsList.map(function(prefTag) {\n            prefTag.getchildren().forEach(function(element) {\n                if ((element.tag == 'preference') && (element.attrib['name']) && element.attrib['default']) {\n                    // Don't add xwalkLiteVersion in the app/config.xml\n                    if (element.attrib['name'] == \"xwalkLiteVersion\") {\n                        xwalkLiteVersion = element.attrib['default'];\n                    } else {\n                        pluginPreferences[element.attrib['name']] = element.attrib['default'];\n                    }\n                }\n            });\n        });\n\n        return pluginPreferences;\n    }\n\n    /** The style of name align with config.xml */\n    var setConfigPreference = function(name, value) {\n        var trimName = name.replace('_', '');\n        for (var localName in xwalkVariables) {\n            if (localName.toUpperCase() == trimName.toUpperCase()) {\n                xwalkVariables[localName] = value;\n                if (localName == 'xwalkVersion') {\n                    specificVersion = true;\n                }\n            }\n        }\n    }\n\n    /** Pase the cli command to get the specific preference*/\n    var parseCliPreference = function() {\n        var commandlineVariablesList = argumentsString.split('--variable');\n        if (commandlineVariablesList) {\n            commandlineVariablesList.forEach(function(element) {\n                element = element.trim();\n                if(element && element.indexOf('XWALK') == 0) {\n                    var preference = element.split('=');\n                    if (preference && preference.length == 2) {\n                        setConfigPreference(preference[0], preference[1]);\n                    }\n                }\n            });\n        }\n    }\n\n    /** Add preference */\n    this.addPreferences = function() {\n        // Pick the xwalk variables with the cli preferences\n        // parseCliPreference();\n\n        // Add the permission of writing external storage when using shared mode\n        if (CordovaConfig.getGlobalPreference('xwalkMode') == 'shared') {\n            addPermission();\n        }\n\n        // Configure the final value in the config.xml\n        // var configXmlRoot = XmlHelpers.parseElementtreeSync(projectConfigurationFile);\n        // var preferenceUpdated = false;\n        // for (var name in xwalkVariables) {\n        //     var child = configXmlRoot.find('./preference[@name=\"' + name + '\"]');\n        //     if(!child) {\n        //         preferenceUpdated = true;\n        //         child = et.XML('<preference name=\"' + name + '\" value=\"' + xwalkVariables[name] + '\" />');\n        //         XmlHelpers.graftXML(configXmlRoot, [child], '/*');\n        //     }\n        // }\n        // if(preferenceUpdated) {\n        //     fs.writeFileSync(projectConfigurationFile, configXmlRoot.write({indent: 4}), 'utf-8');\n        // }\n    }\n\n    /** Remove preference*/\n    this.removePreferences = function() {\n        if (CordovaConfig.getGlobalPreference('xwalkMode') == 'shared') {\n            // Add the permission of write_external_storage in shared mode\n            removePermission();\n        }\n\n        // var configXmlRoot = XmlHelpers.parseElementtreeSync(projectConfigurationFile);\n        // for (var name in xwalkVariables) {\n        //     var child = configXmlRoot.find('./preference[@name=\"' + name + '\"]');\n        //     if (child) {\n        //         XmlHelpers.pruneXML(configXmlRoot, [child], '/*');\n        //     }\n        // }\n        // fs.writeFileSync(projectConfigurationFile, configXmlRoot.write({indent: 4}), 'utf-8');\n    }\n\n    var build64bit = function() {\n        var build64bit = false;\n        var commandlineVariablesList = argumentsString.split('--');\n\n        if (commandlineVariablesList) {\n            commandlineVariablesList.forEach(function(element) {\n                element = element.trim();\n                if(element && element.indexOf(xwalk64bit) == 0) {\n                    build64bit = true;\n                }\n            });\n        }\n        return build64bit;\n    }\n\n    this.beforeBuild64bit = function() {\n        if(build64bit()) {\n            var configXmlRoot = XmlHelpers.parseElementtreeSync(projectConfigurationFile);\n            var child = configXmlRoot.find('./preference[@name=\"' + xwalk64bit + '\"]');\n            if(!child) {\n                child = et.XML('<preference name=\"' + xwalk64bit + '\" value=\"' + xwalk64bit + '\" />');\n                XmlHelpers.graftXML(configXmlRoot, [child], '/*');\n                fs.writeFileSync(projectConfigurationFile, configXmlRoot.write({indent: 4}), 'utf-8');\n            }\n        }\n    }\n\n    this.afterBuild64bit = function() {\n        if(build64bit()) {\n            var configXmlRoot = XmlHelpers.parseElementtreeSync(projectConfigurationFile);\n            var child = configXmlRoot.find('./preference[@name=\"' + xwalk64bit + '\"]');\n            if (child) {\n                XmlHelpers.pruneXML(configXmlRoot, [child], '/*');\n                fs.writeFileSync(projectConfigurationFile, configXmlRoot.write({indent: 4}), 'utf-8');\n            }\n        }\n\n        console.log(\"Crosswalk info:\");\n        console.log(\"        After much discussion and analysis of the market,\");\n        console.log(\"        we have decided to discontinue support for Android 4.0 (ICS) in Crosswalk starting with version 20,\");\n        console.log(\"        so the minSdkVersion of Cordova project is configured to 16 by default. \\n\");\n    }\n\n    xwalkVariables = defaultPreferences();\n\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-crosswalk-webview/node_modules/cordova-plugin-crosswalk-webview/hooks/after_plugin_install/000-shared_mode_special.js":"#!/usr/bin/env node\n\nmodule.exports = function(context) {\n\n    /** @external */\n    var deferral = context.requireCordovaModule('q').defer(),\n        UpdateConfig = require('./../update_config.js'),\n        updateConfig = new UpdateConfig(context);\n\n    /** Main method */\n    var main = function() {\n        // Add xwalk preference to config.xml\n        updateConfig.addPreferences();\n\n        deferral.resolve();\n    };\n\n    main();\n\n    return deferral.promise;\n\n};\n"}